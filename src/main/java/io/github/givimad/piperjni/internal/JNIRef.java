package io.github.givimad.piperjni.internal;
/**
 * In order to avoid sharing pointers between the c++ and java, we use this
 * util base class which holds a random integer id generated in the whisper.cpp wrapper.
 *
 * @author Miguel Álvarez Díez - Initial contribution
 */
public abstract class JNIRef implements AutoCloseable {
    /**
     * Native pointer reference identifier.
     */
    public final int ref;
    private boolean released;

    /**
     * Asserts the provided pointer is still available.
     *
     */
    protected void assertAvailable() {
        if (this.isReleased()) {
            throw new RuntimeException("Unavailable pointer, object is closed");
        }
    }

    /**
     * Creates a new object used to represent a struct pointer on the native library.
     *
     * @param ref a random integer id generated by the native wrapper
     */
    protected JNIRef(int ref) {
        this.ref = ref;
    }

    /**
     * Return true if native memory is free
     *
     * @return a boolean indicating if the native data was already released
     */
    protected boolean isReleased() {
        return released;
    }

    /**
     * Mark the point as released
     */
    protected void release() {
        released = true;
    }
}